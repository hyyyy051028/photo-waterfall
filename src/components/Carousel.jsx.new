import React, { useState, useEffect, useCallback, useRef } from 'react';
import { getFavoritePhotos } from '../supabase';
import './Carousel.css';

function Carousel({ images: defaultImages, interval = 5000 }) {
  const [images, setImages] = useState(defaultImages || []);
  const [favoritePhotos, setFavoritePhotos] = useState([]);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [selectedPhotos, setSelectedPhotos] = useState([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isLoaded, setIsLoaded] = useState(false);
  const [imageDimensions, setImageDimensions] = useState([]);
  const [carouselHeight, setCarouselHeight] = useState('auto');
  const timerRef = useRef(null);
  const carouselRef = useRef(null);

  const startAutoPlay = useCallback(() => {
    if (timerRef.current) clearInterval(timerRef.current);
    timerRef.current = setInterval(() => {
      setCurrentIndex(prev => (prev + 1) % images.length);
    }, interval);
  }, [interval, images.length]);

  const handlePrev = useCallback(() => {
    if (timerRef.current) clearInterval(timerRef.current);
    const prevIndex = currentIndex === 0 ? images.length - 1 : currentIndex - 1;
    setCurrentIndex(prevIndex);
    startAutoPlay();
  }, [images.length, startAutoPlay, currentIndex]);

  const handleNext = useCallback(() => {
    if (timerRef.current) clearInterval(timerRef.current);
    const nextIndex = (currentIndex + 1) % images.length;
    setCurrentIndex(nextIndex);
    startAutoPlay();
  }, [images.length, startAutoPlay, currentIndex]);

  // 加载收藏的照片
  const loadFavoritePhotos = useCallback(async () => {
    try {
      setIsLoading(true);
      
      // 从 Supabase 获取收藏的照片
      const { data, error } = await getFavoritePhotos();
      
      if (error) {
        console.error('Error loading favorite photos:', error);
        setFavoritePhotos([]);
        return;
      }
      
      if (data && Array.isArray(data) && data.length > 0) {
        // 保存完整的照片数据
        setFavoritePhotos(data);
        
        // 提取照片的公开URL用于轮播图
        const favoriteUrls = data.map(photo => photo.public_url);
        
        // 如果有收藏的照片，使用它们更新轮播图
        if (favoriteUrls.length > 0) {
          setImages(favoriteUrls);
        }
      } else {
        setFavoritePhotos([]);
      }
    } catch (error) {
      console.error('Error loading favorite photos:', error);
      setFavoritePhotos([]);
    } finally {
      setIsLoading(false);
    }
  }, []);

  // 初始化时加载收藏照片
  useEffect(() => {
    loadFavoritePhotos();
  }, [loadFavoritePhotos]);

  // 处理照片选择
  const handleSelectPhoto = (photoUrl) => {
    // 检查照片是否已在轮播图中
    if (!images.includes(photoUrl)) {
      setImages(prev => [...prev, photoUrl]);
    }
    setIsModalVisible(false);
  };

  // 打开照片选择模态框
  const showPhotoSelector = () => {
    loadFavoritePhotos(); // 刷新收藏照片列表
    setIsModalVisible(true);
  };

  // 加载图片并获取尺寸信息
  useEffect(() => {
    let mounted = true;

    const loadImages = async () => {
      try {
        const dimensions = [];
        const imagePromises = images.map((src, index) => {
          return new Promise((resolve, reject) => {
            const img = new Image();
            img.src = src;
            img.onload = () => {
              if (mounted) {
                // 保存图片尺寸信息
                dimensions[index] = {
                  width: img.width,
                  height: img.height,
                  aspectRatio: img.width / img.height
                };
                
                // 当所有图片都加载完成后，更新尺寸状态
                if (dimensions.filter(Boolean).length === images.length) {
                  setImageDimensions(dimensions);
                  updateCarouselHeight(dimensions, currentIndex);
                }
              }
              resolve(src);
            };
            img.onerror = () => reject(new Error(`Failed to load image: ${src}`));
          });
        });

        const results = await Promise.allSettled(imagePromises);
        const failedImages = results.filter(r => r.status === 'rejected');
        
        if (failedImages.length > 0) {
          console.warn('Some images failed to load:', 
            failedImages.map(f => f.reason.message));
        }

        if (mounted) {
          setIsLoaded(true);
          startAutoPlay();
        }
      } catch (error) {
        console.error('Failed to load images:', error);
        if (mounted) setIsLoaded(true); // 即使出错也显示轮播图
      }
    };

    loadImages();

    return () => {
      mounted = false;
      if (timerRef.current) clearInterval(timerRef.current);
    };
  }, [images, startAutoPlay, currentIndex]);
  
  // 根据当前显示的图片更新轮播图高度
  const updateCarouselHeight = useCallback((dimensions, index) => {
    if (!dimensions || !dimensions[index]) return;
    
    const containerWidth = carouselRef.current ? carouselRef.current.offsetWidth : window.innerWidth;
    const imageAspectRatio = dimensions[index].aspectRatio;
    
    // 根据容器宽度和图片宽高比计算合适的高度
    let height;
    if (imageAspectRatio >= 1) {
      // 横向图片，高度为宽度除以宽高比，但最小为400px
      height = Math.max(containerWidth / imageAspectRatio, 400);
    } else {
      // 纵向图片，高度为宽度除以宽高比，但最大为容器宽度的1.2倍
      height = Math.min(containerWidth / imageAspectRatio, containerWidth * 1.2);
    }
    
    setCarouselHeight(`${height}px`);
  }, []);
  
  // 当图片索引变化时更新高度
  useEffect(() => {
    if (imageDimensions.length > 0) {
      updateCarouselHeight(imageDimensions, currentIndex);
    }
  }, [currentIndex, imageDimensions, updateCarouselHeight]);
  
  // 窗口大小变化时重新计算高度
  useEffect(() => {
    const handleResize = () => {
      if (imageDimensions.length > 0) {
        updateCarouselHeight(imageDimensions, currentIndex);
      }
    };
    
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, [imageDimensions, currentIndex, updateCarouselHeight]);

  if (!isLoaded || images.length === 0) {
    return null;
  }

  return (
    <div className="carousel-container">
      <div 
        ref={carouselRef}
        className="carousel"
        style={{ height: carouselHeight }}
        onMouseEnter={() => {
          if (timerRef.current) clearInterval(timerRef.current);
        }}
        onMouseLeave={() => {
          startAutoPlay();
        }}
      >
        <button 
          className="carousel-arrow prev" 
          onClick={handlePrev}
        >
          ‹
        </button>
        <button 
          className="carousel-arrow next" 
          onClick={handleNext}
        >
          ›
        </button>
        {images.map((image, index) => {
          const dimension = imageDimensions[index];
          const isLandscape = dimension ? dimension.aspectRatio >= 1 : true;
          
          return (
            <div
              key={index}
              className={`carousel-slide ${index === currentIndex ? 'active' : ''} ${isLandscape ? 'landscape' : 'portrait'}`}
              style={{
                backgroundImage: `url(${image})`,
                zIndex: index === currentIndex ? 1 : 0
              }}
            />
          );
        })}
        {images.length > 1 && (
          <div className="carousel-indicators">
            {images.map((_, index) => (
              <button
                key={index}
                className={`carousel-dot ${index === currentIndex ? 'active' : ''}`}
                onClick={() => {
                  if (timerRef.current) clearInterval(timerRef.current);
                  setCurrentIndex(index);
                  startAutoPlay();
                }}
              />
            ))}
          </div>
        )}
      </div>
      
      {/* 照片选择按钮 */}
      <div className="carousel-controls">
        <button 
          onClick={showPhotoSelector}
          className="photo-selector-button"
        >
          选择照片
        </button>
      </div>
      
      {/* 照片选择模态框 */}
      {isModalVisible && (
        <div className="photo-modal-overlay" onClick={() => setIsModalVisible(false)}>
          <div className="photo-modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="photo-modal-header">
              <h3>选择照片</h3>
              <button className="photo-modal-close" onClick={() => setIsModalVisible(false)}>×</button>
            </div>
            <div className="photo-selector-container">
              {isLoading ? (
                <div className="loading-container">
                  <div className="loading-spinner"></div>
                  <p>加载照片中...</p>
                </div>
              ) : favoritePhotos.length === 0 ? (
                <div className="empty-photos">
                  <p>暂无收藏照片，请先在照片库中收藏照片</p>
                </div>
              ) : (
                <div className="photo-grid">
                  {favoritePhotos.map(photo => (
                    <div 
                      key={photo.id} 
                      className={`photo-item ${images.includes(photo.public_url) ? 'selected' : ''}`}
                      onClick={() => handleSelectPhoto(photo.public_url)}
                    >
                      <div 
                        className="photo-thumbnail" 
                        style={{ backgroundImage: `url(${photo.public_url})` }}
                      />
                      <div className="photo-info">
                        <span className="photo-name">{photo.name || '未命名照片'}</span>
                        <span className="is-selected">
                          {images.includes(photo.public_url) ? '已选择' : ''}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default Carousel;
